<?php

namespace ActualSkill\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{
    
    public function findOneRandomJoinedToRatingSchema($ignore = null){

        $players = $this->findAll();
        $randomplayer = $players[array_rand($players)];
        
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, r, c, a FROM ActualSkillCoreBundle:Player p
                JOIN p.ratingschema r
                JOIN r.categories c
                JOIN c.attributes a
                WHERE p.id = :id'
            )->setParameter('id', $randomplayer->getId());        

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findOneBySlugJoinedToRatingSchema($playerslug, $ratingschemaslug = "player")
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, r, c, a FROM ActualSkillCoreBundle:Player p
                JOIN p.ratingschema r
                JOIN r.categories c
                JOIN c.attributes a
                WHERE p.slug = :playerslug
                AND r.slug = :ratingschemaslug'
            )
            ->setParameter('playerslug', $playerslug)
            ->setParameter('ratingschemaslug', $ratingschemaslug);

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }    
   
    public function findOneBySlugWithRatings($slug)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, r FROM ActualSkillCoreBundle:Player p
                JOIN p.ratingschema r
                WHERE p.slug = :slug'
            )->setParameter('slug', $slug);

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findWithRatings($limit = false)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, r, ls FROM ActualSkillCoreBundle:Player p
                JOIN p.ratingschema r
                JOIN p.latestStatsheet ls
                ORDER BY p.ratingAverage DESC'
            );

        if(is_numeric($limit)){
            $query->setMaxResults($limit);
        }

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findMostPopular($limit = false)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p,
                (SELECT COUNT(l2.id) FROM ActualSkillCoreBundle:BaseEntityLike l2 WHERE l2.object = p.id) as num_likes
                FROM ActualSkillCoreBundle:Player p
                ORDER BY num_likes DESC'
            );

        if(is_numeric($limit)){
            $query->setMaxResults($limit);
        }

        try {
            $result = $query->getResult();
            $list = array();

            foreach ($result as $key => $value) {
                $list[] = $value[0];
            }
            return $list;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    } 

    public function findMostRated($limit = false){
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, ls,
                (SELECT COUNT(r2.id) FROM ActualSkillCoreBundle:Rating r2 WHERE r2.object = p.id GROUP BY r2.object) as num_ratings
                FROM ActualSkillCoreBundle:Player p
                JOIN p.latestStatsheet ls
                ORDER BY num_ratings DESC '
            );

        if(is_numeric($limit)){
            $query->setMaxResults($limit);
        }

        try {
            $result = $query->getResult();
            $list = array();

            foreach ($result as $key => $value) {
                $list[] = $value[0];
            }
            return $list;
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }        
    }   
}